#!/usr/bin/env ansible-playbook
---

- hosts: all
  vars_files:
    - vars/gpdb.yml
  remote_user: root
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: yes
  tasks:
    - name: "00. check whether can connect internet"
      shell: |
        ping -c 1 -w 1 www.baidu.com > /dev/null; \
        if [ $? -ne 0 ]; then \
           echo "[ERROR]: host can not connect internet world!"; \
           exit 1; \
        fi
    - name:  "01. modify sshd config file"
      lineinfile:
        path:  /etc/ssh/sshd_config
        regexp:  '{{ item.regexp }}'
        line:  '{{ item.line }}'
        state: present
      with_items:
      - regexp:  "^StrictModes yes"
        line:  "StrictModes no"
      - regexp:  "^#StrictModes yes"
        line:  "StrictModes no"
      notify:
        - restart sshd service
    - name: 02. stop and disable firewall service
      shell: '{{ item }}'
      with_items:
        - 'systemctl unmask firewalld'
        - 'systemctl start firewalld.service'
        - 'systemctl stop firewalld.service'
        - 'systemctl disable firewalld.service'
    - name: 03. be sure expect is installed
      yum: name=expect state=installed
    - name: 04. close selinux temporary
      shell: setenforce 0
      failed_when: false
    - name: 05. close selinux forever
      when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"
      lineinfile:
        dest: /etc/selinux/config
        regexp: '^SELINUX='
        line: 'SELINUX=disabled'
    - name: 06. be sure ntp is installed
      yum: name=ntp state=installed
      tags: ntp
    - name: 07. configure sync time using aliyun server
      when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"
      cron: name="sync time" minute='*/5' hour=* day=* month=* weekday=* job="/usr/sbin/ntpdate -u ntp1.aliyun.com >/dev/null 2>&1"
      ignore_errors: true
    - name: 08. update configure file for etc-hosts
      copy: src=gpnodes/hosts dest=/etc/hosts
    - name: 09. change host name to etc-hostname
      raw: 'echo {{hostname|quote}} > /etc/hostname'
    - name: 10. change host name by command hostname
      shell: hostname {{hostname|quote}}
    - name: 11. create greenplum admin user
      user:
        name: '{{ greenplum_admin_user }}'
        password: "{{ greenplum_admin_password | password_hash('sha512') }}"
    - name: 12. copy greeplum rpm package to host
      copy:
        src: '{{ package_path }}'
        dest: /tmp
    - name: 13. backing up sysctl
      copy:
        src: /etc/sysctl.conf
        remote_src: yes
        dest: /tmp/sysctl.conf.bak
        backup: yes
    - name: 14. get shmall 
      shell: echo $(expr $(getconf _PHYS_PAGES) / 2) 
      register: shmall
    - name: 15. get shmmax
      shell: echo $(expr $(getconf _PHYS_PAGES) / 2 \* $(getconf PAGE_SIZE))
      register: shmmax
    - name: 16. get min_free_kbytes
      shell: awk 'BEGIN {OFMT = "%.0f";} /MemTotal/ {print $2 * .03;}' /proc/meminfo
      register: min_free_kbytes
    - name: 17. set shmall
      sysctl:
        name: kernel.shmall
        value: '{{ shmall.stdout }}'
        reload: yes
    - name: 18. set shmmax
      sysctl:
        name: kernel.shmmax
        value: '{{ shmmax.stdout }}'
        reload: yes
    - name: 19. set min_free_kbytes
      sysctl:
        name: vm.min_free_kbytes
        value: '{{ min_free_kbytes.stdout }}'
        reload: yes
    - name: 20. configure sysctl
      sysctl:
        name: '{{ item.key }}'
        value: '{{ item.value }}'
        sysctl_set: yes
        state: present
        reload: yes
        ignoreerrors: yes
      with_dict:
        kernel.shmmni: 4096
        vm.overcommit_memory: 2
        vm.overcommit_ratio: 95
        net.ipv4.ip_local_port_range: 10000 65535
        kernel.sem: 500 2048000 200 32767
        kernel.sysrq: 1
        kernel.core_uses_pid: 1
        kernel.msgmnb: 65536
        kernel.msgmax: 65536
        kernel.msgmni: 2048
        net.ipv4.tcp_syncookies: 1
        net.ipv4.conf.default.accept_source_route: 0
        net.ipv4.tcp_max_syn_backlog: 4096
        net.ipv4.conf.all.arp_filter: 1
        net.core.netdev_max_backlog: 10000
        net.core.rmem_max: 2097152
        net.core.wmem_max: 2097152
        vm.swappiness: 10
        vm.zone_reclaim_mode: 0
        vm.dirty_expire_centisecs: 500
        vm.dirty_writeback_centisecs: 100
        vm.dirty_background_ratio: 0
        vm.dirty_ratio: 0
        vm.dirty_background_bytes: 1610612736
        vm.dirty_bytes: 4294967296
    - name: 21. state PAM limits
      pam_limits:
        domain: '*'
        limit_type: '-'
        limit_item: '{{ item.key }}'
        value: '{{ item.value }}'
      with_dict:
        nofile: 655360
        nproc: 655360
        memlock: unlimited
        core: unlimited
    - name: 22. install greenplum rpm package
      yum:
        name: '/tmp/{{ package_path | basename }}'
        # installroot: '{{ greenplum_install_directory }}'
        state: present
    - name: 23. cleanup greenplum package file from host
      file:
        path: '/tmp/{{ package_path | basename }}'
        state: absent
    - name: 24. find greenplum install directory
      find:
        paths: '{{ greenplum_install_directory }}'
        patterns: 'greenplum-db*'
        file_type: directory
      register: installed_dir
    - name: 25. change install directory ownership
      file:
        path: '{{ item.path }}'
        owner: '{{ greenplum_admin_user }}'
        group: '{{ greenplum_admin_user }}'
        recurse: yes
      with_items: '{{ installed_dir.files }}'
    - name: 26. update pam_limits
      pam_limits:
        domain: '{{ greenplum_admin_user }}'
        limit_type: '-'
        limit_item: '{{ item.key }}'
        value: '{{ item.value }}'
      with_dict:
        nofile: 524288
        nproc: 131072
    - name: 27. find installed greenplum version
      shell: . '{{ greenplum_install_directory }}'/greenplum-db/greenplum_path.sh && '{{ greenplum_install_directory }}'/greenplum-db/bin/postgres --gp-version
      register: postgres_gp_version
    - name: 28. fail if the correct greenplum version is not installed
      fail:
        msg: "Expected greenplum version {{ version }}, but found '{{ postgres_gp_version.stdout }}'"
      when: "version is not defined or version not in postgres_gp_version.stdout"
    - name: 29. Create data directory if it does not exist
      file:
        path: '{{ item }}'
        state: directory
        mode: '0755'
      with_items:
        - '{{ greenplum_data_directory }}/'
        - '{{ greenplum_data_directory }}/master/'
        - '{{ greenplum_data_directory }}/primary/'
        - '{{ greenplum_data_directory }}/mirror/'
    - name: 30. copy greenplum node temporary files
      copy:
        src: '{{ item }}'
        dest: '/home/{{ greenplum_admin_user }}/'
        remote_src: no
      with_items:
        - gpnodes/all_hosts
        - gpnodes/all_ips
        - gpnodes/master_hosts
        - gpnodes/standby_hosts
        - gpnodes/segment_hosts
    - name: 31. change user {{ greenplum_admin_user }} home files ownership
      file:
        path: '/home/{{ greenplum_admin_user }}'
        owner: '{{ greenplum_admin_user }}'
        group: '{{ greenplum_admin_user }}'
        recurse: yes
    - name: 32. change data directory ownership
      file:
        path: '{{ greenplum_data_directory }}'
        owner: '{{ greenplum_admin_user }}'
        group: '{{ greenplum_admin_user }}'
        recurse: yes

  handlers:
    - name: restart sshd service
      service:
        name: sshd
        state: restarted
